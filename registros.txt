Serializer

from rest_framework import serializers
from .models import Usuario

class RegistroSerializer(serializers.ModelSerializer):
    password2 = serializers.CharField(write_only=True)
    class Meta:
        model = Usuario
        fields = ('id', 'username', 'email', 'idade','cpf', 'password','password2')
        extra_kwargs = {'password': {'write_only': True},'password2': {'write_only': True}}
    
    def create(self, validated_data):
        password = validated_data.pop('password')
        password2 = validated_data.pop('password2')

        if password == password2:
            instance = Usuario(**validated_data)
            instance.set_password(password)
            instance.save()
        else:
            raise serializers.ValidationError("As senhas não coincidem.")

        return instance


View 

from django.shortcuts import render
from .models import Usuario
# Create your views here.
from rest_framework.response import Response

from rest_framework import generics
from .models import Usuario
from .serializers import RegistroSerializer
from rest_framework.views import APIView
from rest_framework.permissions import IsAuthenticated

class CustomUserListCreateView(generics.ListCreateAPIView):
    queryset = Usuario.objects.all()
    serializer_class = RegistroSerializer

class CustomUserRetrieveUpdateDestroyView(generics.RetrieveUpdateDestroyAPIView):
    queryset = Usuario.objects.all()
    serializer_class = RegistroSerializer


class Me(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request):
        user = request.user
        custom_user = Usuario.objects.filter(id=user.id).first()
        if custom_user:
            id = custom_user.pk
            email = custom_user.email
            username = custom_user.username

            response_data = {
                "id": id,
                "email": email,
                "username": username
            }
            return Response(response_data, status=200)
        else:
            return Response({"error": "Usuário não encontrado."}, status=404)


rotas

from django.contrib import admin
from django.urls import path
from usuarios.views import ListarCriarUsuarios
from rest_framework.authtoken.views import obtain_auth_token
from usuarios.views import Me
from estabelecimentos.views import EstabelecimentoCreateView
urlpatterns = [
    path('admin/', admin.site.urls),
    path('cadastro/', ListarCriarUsuarios.as_view(), name='create-user'),
    path('login/', obtain_auth_token, name='login'),
    path('me/', Me.as_view(), name='dados-usuario'),
]
